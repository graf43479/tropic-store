@using MvcContrib.UI.Grid;
@using WebUI.Infrastructure.ExtensionMethods
@*@model IEnumerable<Domain.Entities.User>*@
@model WebUI.Models.PagedViewModel<Domain.Entities.DimOrderStatus>

<style>
    form {
        border: none;
        background-color: white;
        padding: 0;
        margin: 0;
    }
    table {
    margin-left: 0px;
    }
</style>
    
@*<link href="@Url.Content("~/Content/themes/jquery-ui-1.10.4.custom.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/jquery-1.8.3.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/js/bootstrap.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>*@
    @*<script src="@Url.Content("~/Scripts/modernizr-2.7.2.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui-1.9.2.custom.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@
    @*
<script src="@Url.Content("~/Scripts/jquery-ui-1.9.2.custom.min.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@

<div id="sequence">
    
@using (Html.BeginForm("DeleteDimOrderStatus", "Admin", FormMethod.Post))
{
    @Html.Grid(Model.PagedList).Columns(column =>
        {

            column.For(x => x.Sequence).SortColumnName("Sequence").Sortable(false).Named("№");
            column.For(x => x.OrderStatusDesc).SortColumnName("OrderStatusDesc").Sortable(false).Named("Статус").Attributes(x=>new Dictionary<string, object> { { "style", "text-align: left" } }); ;
      

            @*
            column.For(x => Ajax.ActionLink("Вверх", "DimOrderStatusSequence", new {dimOrderStatusId = x.DimOrderStatusID, actionType = "Up"}, new AjaxOptions
                {
                    UpdateTargetId = "sequence2",
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST"
                })).Sortable(false).Named("Вверх");


            column.For(x => Ajax.ActionLink("Вниз", "DimOrderStatusSequence", new {dimOrderStatusId = x.DimOrderStatusID, actionType = "Down"}, new AjaxOptions
                {
                    UpdateTargetId = "sequence2",
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST"
                })).Sortable(false).Named("Вниз");

                *@
                
            column.For(x => Html.Raw(Ajax.ActionLink(" ", "DimOrderStatusSequence", new { dimOrderStatusId = x.DimOrderStatusID, actionType = "Up" }, new AjaxOptions
            {
                UpdateTargetId = "sequence2",
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "POST",
                OnBegin = "gifLoaderBefore",
                OnSuccess = "gifLoaderAfter",
                OnFailure = "gifLoaderAfter",
                OnComplete = "gifLoaderAfter"
            }, new { @class = "glyphicon glyphicon-arrow-up btn btn-lg", @style = "color: #8EB50C;" }).ToString() + " " + (Ajax.ActionLink(" ", "DimOrderStatusSequence", 
                            new { dimOrderStatusId = x.DimOrderStatusID, actionType = "Down" }, new AjaxOptions
            {
                UpdateTargetId = "sequence2",
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "POST",
                OnBegin = "gifLoaderBefore",
                OnSuccess = "gifLoaderAfter",
                OnFailure = "gifLoaderAfter",
                OnComplete = "gifLoaderAfter"
            }, new { @class = "glyphicon glyphicon-arrow-down btn btn-lg", @style = "color: #8EB50C;" }))).ToString()).Sortable(false).Named("Упорядочить").Encode(false);

                                                                                                                                                           
 @*
            column.For(x => Html.Raw(Ajax.ActionLink(" ", "ProductSequence", new { productId = x.ProductID, actionType = "Up" }, new AjaxOptions
     {
         UpdateTargetId = "sequence",
         InsertionMode = InsertionMode.Replace,
         HttpMethod = "POST"
     }, new { @class = "glyphicon glyphicon-arrow-up btn btn-lg", @style = "color: #8EB50C;" }).ToString() + " " + (Ajax.ActionLink(" ", "ProductSequence",
                         new { productId = x.ProductID, actionType = "Down" }, new AjaxOptions
     {
         UpdateTargetId = "sequence",
         InsertionMode = InsertionMode.Replace,
         HttpMethod = "POST"
     }, new { @class = "glyphicon glyphicon-arrow-down btn btn-lg", @style = "color: #8EB50C;" }))).ToString()).Sortable(false).Named("Упорядочить").Encode(false);

     *@

        @*    column.Custom(x => MvcHtmlString.Create(string.Format("<form action='/Admin/DeleteDimOrderStatus' method='post'> <input id='dimOrderStatusID' name='dimOrderStatusID' type='hidden' value='{0}' /><input type='submit' value='Удалить' /></form>", x.DimOrderStatusID)))
                  .Named("Действие").Sortable(false).Sortable(false).Attributes(x =>
                      {
                          return new Dictionary<string, object> {{"style", "text-align: center"}};
                      });*@


            /*column.Custom(x => Html.ActionQueryLink("Удалить", "DeleteDimOrderStatus", new { dimOrderStatusID = x.DimOrderStatusID })).Named("Действие").Sortable(false).Attributes(x =>
    {
        return new Dictionary<string, object> { { "style", "text-align: center" } };
    });*/
            column.For(x => Ajax.ActionLink(" ", "EditDimOrderStatus", new {dimOrderStatusID = x.DimOrderStatusID}, new AjaxOptions()
                {
                    UpdateTargetId = "updateDialog",
                    HttpMethod = "GET",
                    InsertionMode = InsertionMode.Replace,
                    OnBegin = "gifLoaderBefore",
                    OnSuccess = "gifLoaderAfter",
                    OnFailure = "gifLoaderAfter",
                    OnComplete = "gifLoaderAfter"
                }, new {@class = "status-change edit-status glyphicon glyphicon-edit btn-xs btn btn-default", @title="Редактировать"}



                                )).Header(x => "<span class='glyphicon glyphicon-edit'> </span>").Sortable(false).SortColumnName("Sequence").Named("Статус");

            column.Custom(x => Html.Raw("<a href = " + Url.Action("DeleteDimOrderStatus", "Admin", new {dimOrderStatusID = x.DimOrderStatusID}) + " class='linkButton glyphicon glyphicon-remove btn-xs btn btn-danger' title='Удалить'></a>")).Named("Options").Header(o => "<span class='glyphicon glyphicon-remove'> </span>").Encode(false)
                  .Sortable(false);
        }).Sort(Model.GridSortOptions).Attributes(@class => "table table-striped table-bordered table-hover table-condensed grid-style")
    }
      
    @Html.ActionLink("Добавить новый статус", "CreateDimOrderStatus", null,  new { @class = "role-change btn btn-info btn-md", @style = "margin-left: 10px; color: white; float: right;"  }) 
           
  
 
        
    <script type="text/javascript">
        function Common6() {
            _this = this;
            var linkObj;

            this.init = function () {
                $(".role-change").click(function (event) {
                    event.preventDefault();
                    linkObj = $(this);
                    var viewUrl = linkObj.attr('href');

                    _this.showRolePopup(viewUrl, initRolePopup);
                });

                $(".status-change").click(function (event) {
                    //alert('!!');
                    event.preventDefault();
                    linkObj = $(this);
                    var viewUrl = linkObj.attr('href');

                    _this.showRolePopup(viewUrl, initRolePopup);
                });
            };


            this.showRolePopup = function (url, callback) {
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (data) {
                        showRoleModalData(data, callback);
                    }
                });
            };

            this.showStatusPopup = function (url, callback) {
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (data) {
                        showStatusModalData(data, callback);
                    }
                });
            };

            function initRolePopup(modal) {
                $("#roleButton").click(function () {
                    $.ajax({
                        type: "POST",
                        url: "/Admin/EditRole",
                        data: $("#containers").serialize(),
                        success: function (data) {
                            initRolePopup(modal);
                            updateRoleSuccess(data);
                        },
                        error: alert('Error')

                    });
                });
            }

            function initStatusPopup(modal) {
                $("#statusButton").click(function () {
                    $.ajax({
                        type: "POST",
                        url: "/Admin/EditDimOrderStatus",
                        data: $("#updateDialog").serialize(),
                        success: function (data) {
                            initStatusPopup(modal);
                            // $("body").addClass("modal-open");
                           // updateStatusSuccess(data);
                        },
                        error: alert('Error')

                    });
                });
            }

            function showRoleModalData(data, callback) {
                $(".modal-backdrop").remove();
                var popupWrapper = $("#containers");
                popupWrapper.empty();
                popupWrapper.html(data);
                var popup = $(".modal", popupWrapper);
                $(".modal", popupWrapper).modal();
            }

            function showStatusModalData(data, callback) {
                $(".modal-backdrop").remove();
                var popupWrapper = $("#updateDialog");
                popupWrapper.empty();
                popupWrapper.html(data);
                var popup = $(".modal", popupWrapper);
                $(".modal", popupWrapper).modal();
            }

            function updateRoleSuccess(data) {
                if (data.Success == true) {
                    window.location.reload();
                } else {
                    $("#update-message").show();
                    window.location.reload();
                }
            }
        }

        var common = null;
        $().ready(function () {
            common = new Common6();
            common.init();
        });



    </script>

    @*

    <script type="text/javascript">
           var linkObj;
           $(function () {
               //$(".logOnEnter").button();

               $('#updateDialog').dialog({
                   autoOpen: false,
                   width: 450,
                   resizable: false,
                   modal: true,
                   buttons: {
                       "Применить": function () {
                           $("#update-message").html(''); //make sure there is nothing on the message before we continue                         
                           $("#updateStatusForm").submit();
                       },
                       "Отмена": function () {
                           $(this).dialog("close");
                       }
                   }
               });

               $(".change").click(function () {
                   //change the title of the dialgo
                   linkObj = $(this);

                   var dialogDiv = $('#updateDialog');
                   var viewUrl = linkObj.attr('href');
                   $.get(viewUrl, function (data) {
                       dialogDiv.html(data);
                       //validation
                       var $form = $("#updateStatusForm");
                       // Unbind existing validation
                       $form.unbind();
                       $form.data("validator", null);
                       // Check document for changes
                       $.validator.unobtrusive.parse(document);
                       // Re add validation with changes
                       $form.validate($form.data("unobtrusiveValidation").options);
                       //open dialog
                       dialogDiv.dialog('open');
                   });
                   return false;
               });
           });

           function updateSuccess(data) {
               if (data.Success == true) {
                   //if ($("#update-message").html() == "True") {
                   //we update the table's info
                   var parent = linkObj.closest("body");
                   parent.find("#registerlogon").html($("#Logi2n").val());
                   //now we can close the dialog
                   $('#updateDialog').dialog('close');
                   //twitter type notification
                   $('#commonMessage').html("Изменения внесены!");
                   $('#commonMessage').delay(400).slideDown(400).delay(3000).slideUp(400);
                   //window.location.replace("http://localhost:57600/Admin/DimOrderStatus");
                   window.location.reload();
               }
               else {
                   //$("#update-message").show();
                   $("#update-message").html(data.ErrorMessage);
                   $("#update-message").show();
               }
           }
    
</script>
*@



    @*<script type="text/javascript">
    function CommonOrderStatus() {
        _this = this;
        var linkObj;

        this.init = function () {
            $(".status-change").click(function (event) {
                event.preventDefault();
                linkObj = $(this);
                var viewUrl = linkObj.attr('href');
                //alert(viewUrl);
                _this.showStatusPopup(viewUrl, initStatusPopup);
            });
        };


        this.showStatusPopup = function (url, callback) {
            $.ajax({
                type: "GET",
                url: url,
                success: function (data) {
                    showStatusModalData(data, callback);
                }
            });
        };

        function initStatusPopup(modal) {
            $("#statusButton").click(function () {
                $.ajax({
                    type: "POST",
                    url: "/Admin/EditDimOrderStatus",
                    data: $("#containers").serialize(),
                    success: function (data) {
                        initStatusPopup(modal);
                        updateStatusSuccess(data);
                    },
                    error: alert('Error')

                });
            });
        }

        function showStatusModalData(data, callback) {
            $(".modal-backdrop").remove();
            var popupWrapper = $("#containers");
            popupWrapper.empty();
            popupWrapper.html(data);
            var popup = $(".modal", popupWrapper);
            $(".modal", popupWrapper).modal();
        }

        function updateStatusSuccess(data) {
            if (data.Success == true) {
                window.location.reload();
            } else {
                $("#update-message").show();
                window.location.reload();
            }
        }
    }

    var common = null;
    $().ready(function () {
        common = new CommonOrderStatus();
        common.init();
    });
</script>
*@  

</div>



